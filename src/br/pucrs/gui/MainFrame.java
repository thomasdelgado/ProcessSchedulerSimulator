/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 08/09/2011, 21:54:56
 */
package br.pucrs.gui;

import br.pucrs.os.Device;
import br.pucrs.os.Functions;
import br.pucrs.os.Process;
import br.pucrs.os.Scheduler;
import br.pucrs.os.SchedulerRoundRobin;
import br.pucrs.os.SchedulerSJF;
import java.io.File;
import java.util.ArrayList;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 10109144
 */
public class MainFrame extends javax.swing.JFrame {

    JFileChooser dialog;
    Scheduler scheduler;
    String path = "";
    int ticks = 20;

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        dialog = new JFileChooser();
        dialog.addChoosableFileFilter(new Functions.TxtFilter());
        scheduler = new SchedulerSJF();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        rbSJF = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        txtQuantum = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProcesses = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtStatus = new javax.swing.JTextArea();
        txtAVG = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        txtAVG1 = new javax.swing.JLabel();
        txtAVG2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDevices = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Process Scheduler Simulator");

        jButton1.setText("Execute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Scheduler Mode"));

        buttonGroup1.add(rbSJF);
        rbSJF.setSelected(true);
        rbSJF.setText("SJF");
        rbSJF.setName("rbSJF"); // NOI18N
        rbSJF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeChange(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Round Robin");
        jRadioButton2.setName("rbRoundRobin"); // NOI18N
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeChange(evt);
            }
        });

        txtQuantum.setText("5");
        txtQuantum.setEnabled(false);
        txtQuantum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantumActionPerformed(evt);
            }
        });

        jLabel1.setLabelFor(txtQuantum);
        jLabel1.setText("Quantum: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbSJF)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(rbSJF)
                .addComponent(jRadioButton2)
                .addComponent(txtQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1))
        );

        rbSJF.getAccessibleContext().setAccessibleName("rbSJF");

        tblProcesses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Processor Time", "Arrival time", "Executed", "Blocked Time", "Waiting time", "Turnaround Time"
            }
        ));
        jScrollPane1.setViewportView(tblProcesses);

        txtStatus.setColumns(20);
        txtStatus.setRows(5);
        jScrollPane2.setViewportView(txtStatus);

        txtAVG.setText("Turnaround AVG: 0");

        jButton2.setText("Step");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtAVG1.setText("Processes");

        txtAVG2.setText("Devices");

        tblDevices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "No devices detected."
            }
        ));
        jScrollPane3.setViewportView(tblDevices);

        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtAVG1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                    .addComponent(txtAVG)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                    .addComponent(txtAVG2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(txtAVG1)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAVG2)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtAVG)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int retorno = dialog.showOpenDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            File arquivo = dialog.getSelectedFile();
            path = arquivo.getAbsolutePath();
            //carrega processos
            scheduler.setProcesses(Functions.ReadProcess(path));
            scheduler.setDevices(Functions.ReadDevices(path));
            Functions.ReadIO(path, scheduler);
            updateTables(tblProcesses);
            updateTableDevices(tblDevices);
            if(!rbSJF.isSelected())
                txtQuantum.setEnabled(true);
            txtStatus.setText("");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Executa as tarefas enquando houver processos que não foram executados.
        scheduler.restartProcesses();
        if (scheduler.getProcessesCount() > 0) {
            String text = "";
            while (scheduler.getProcessesCount() > 0) {
                //próximo tick
                text += "Tick: " + (scheduler.getTick());
                Process p = scheduler.nextTick();
                if (p != null) {
                    text += " Process Executed: " + p.toString();
                    if (p.isBlocked()) {
                        text += " and call I/O to Device: " + scheduler.getWhereProcessIs(p).getId();
                    }
                } else {
                    text += " Processor Idle...";
                }
                text += "\n";
                //Atualiza a tabela dos processos e o histórico
                txtStatus.setText(text);    

            }
            scheduler.nextTick();
            updateTables(tblProcesses);
            updateTableDevices(tblDevices);
            txtAVG.setText("Turnaround AVG: " + scheduler.getTunaroundTimeAVG());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void modeChange(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeChange
        if (path == "")
            return;
        if (rbSJF.isSelected()) {
            txtQuantum.setEnabled(false);
            scheduler = new SchedulerSJF();
            scheduler.setProcesses(Functions.ReadProcess(path));
            scheduler.setDevices(Functions.ReadDevices(path));
            Functions.ReadIO(path, scheduler);
        } else {
            txtQuantum.setEnabled(true);
            scheduler = new SchedulerRoundRobin(Integer.parseInt(txtQuantum.getText()));
            scheduler.setProcesses(Functions.ReadProcess(path));
            scheduler.setDevices(Functions.ReadDevices(path));
            Functions.ReadIO(path, scheduler); 
        }
    }//GEN-LAST:event_modeChange

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    //Executa apenas um tick
    if (scheduler.getProcessesCount() > 0) {
        String text = txtStatus.getText();
        //próximo tick
        text += "Tick: " + (scheduler.getTick());
        Process p = scheduler.nextTick();
        if (p != null) {
            text += " Process Executed: " + p.toString();
            if (p.isBlocked()) {
                text += " and call I/O to Device: " + scheduler.getWhereProcessIs(p).getId();
            }
        } else {
            text += " Processor Idle...";
        }
        text += "\n";
        //Atualiza a tabela dos processos e o histórico
            txtStatus.setText(text);
        updateTables(tblProcesses);
        updateTableDevices(tblDevices);
        if (scheduler.getProcessesCount() == 0) {
            txtAVG.setText("Turnaround AVG: " + scheduler.getTunaroundTimeAVG());
        }
    }
}//GEN-LAST:event_jButton2ActionPerformed

    private void txtQuantumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantumActionPerformed
        SchedulerRoundRobin r;
        if(scheduler instanceof SchedulerRoundRobin){
            r = (SchedulerRoundRobin) scheduler;
            r.setQuantum(Integer.parseInt(txtQuantum.getText()));
        }    
    }//GEN-LAST:event_txtQuantumActionPerformed

    //Atualiza status da tabela
    private void updateTables(JTable table) {
        DefaultTableModel dtmc = new DefaultTableModel();
        dtmc.addColumn("ID ");
        dtmc.addColumn("Processor time ");
        dtmc.addColumn("Arrival time ");
        dtmc.addColumn("Executed ");
        dtmc.addColumn("Blocked time ");
        dtmc.addColumn("Waiting time");
        dtmc.addColumn("Turnaround time");

        //percentuais

        for (int x = 0; x < scheduler.getProcesses().size(); x++) {
            String[] linha = new String[7];
            Process p = scheduler.getProcesses().get(x);
            linha[0] = p.getId();
            linha[1] = "" + p.getProcessorTime();
            linha[2] = "" + p.getArrivalTime();
            if (p.isExecuted()) {
                linha[3] = "Yes";
            } else {
                linha[3] = "No";
            }
            linha[4] = "" + p.getBlockedTime();
            linha[5] = "" + p.getWaitingTime();
            linha[6] = "" + p.getTurnaroundTime();
            dtmc.addRow(linha);
        }

        table.setModel(dtmc);
    }

    //Atualiza status da tabela
    private void updateTableDevices(JTable table) {
        DefaultTableModel dtmc = new DefaultTableModel();
        for (Device d : scheduler.getDevices()) {
            dtmc.addColumn(d.getId() + " (" + d.getResponseTime() + ")");
        }

        for (int i = 0; i < scheduler.getProcessesCount(); i++) {
            String[] linha = new String[scheduler.getDevices().size()];
            for (int x = 0; x < scheduler.getDevices().size(); x++) {
                Device device = scheduler.getDevices().get(x);
                Process process = null;
                if (device.getProcesses().size() > i) {
                    process = device.getProcesses().get(i);
                }
                if (process != null) {
                    if (i == 0) {
                        linha[x] = process.getId() + " (" + device.getRemaingTime() + ")";
                    } else {
                        linha[x] = process.getId();
                    }
                } else {
                    linha[x] = "";
                }
            }
            dtmc.addRow(linha);
        }



        table.setModel(dtmc);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton rbSJF;
    private javax.swing.JTable tblDevices;
    private javax.swing.JTable tblProcesses;
    private javax.swing.JLabel txtAVG;
    private javax.swing.JLabel txtAVG1;
    private javax.swing.JLabel txtAVG2;
    private javax.swing.JTextField txtQuantum;
    private javax.swing.JTextArea txtStatus;
    // End of variables declaration//GEN-END:variables
}
